import { EventEmitter, AfterViewInit, OnDestroy, OnChanges, ElementRef, SimpleChanges, NgZone } from '@angular/core';
import Popper from 'popper.js';
import * as ɵngcc0 from '@angular/core';
export declare class PopperComponent implements AfterViewInit, OnChanges, OnDestroy {
    private el;
    private zone;
    show: boolean;
    closeButton: boolean;
    placement: Popper.Placement;
    positionFixed: boolean;
    eventsEnabled: boolean;
    modifiers: Popper.Modifiers;
    target: string | Element;
    close: EventEmitter<void>;
    private popper;
    constructor(el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onClose(): void;
    create(): void;
    destroy(): void;
    private getTargetNode;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PopperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PopperComponent, "angular-popper", never, { "show": "show"; "closeButton": "closeButton"; "placement": "placement"; "positionFixed": "positionFixed"; "eventsEnabled": "eventsEnabled"; "modifiers": "modifiers"; "target": "target"; }, { "close": "close"; }, never, ["*", ".close-button, [close-button]", ".content, [content]"]>;
}

//# sourceMappingURL=angular-popper.component.d.ts.map